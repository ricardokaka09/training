{"ast":null,"code":"var _jsxFileName = \"E:\\\\JS\\\\hocJS\\\\training\\\\todo-redux\\\\src\\\\task\\\\TodoItem.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport store from \"../store\";\nimport PropTypes from \"prop-types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TodoItem({\n  todoReducer: {\n    process,\n    finished\n  },\n  task,\n  checked\n}) {\n  _s();\n\n  const [done, setDone] = useState(checked); // useEffect(() => {\n  //   console.log(done);\n  // }, []);\n  // const memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);\n\n  const onChange = useCallback(() => {\n    setDone(!done);\n    console.log(done); // if(done){\n    //   store.dispatch({\n    //     type: \"remove\",\n    //     payload: { finished: task, mess: \"finished working\" },\n    //   });\n    // }\n  });\n\n  const doneWork = task => {\n    store.dispatch({\n      type: \"remove\",\n      payload: {\n        finished: task,\n        mess: \"finished working\"\n      }\n    });\n  };\n\n  const back = task => {\n    store.dispatch({\n      type: \"add__again\",\n      payload: {\n        process: task,\n        mess: \"update success\"\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      checked: done,\n      className: \"list__checkbox\",\n      onChange: () => onChange()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: task\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this) // <>\n  //   {process?.map((item) => (\n  //     <li>\n  //       <input\n  //         type=\"checkbox\"\n  //         checked={false}\n  //         className=\"list__checkbox\"\n  //         onChange={() => {\n  //           doneWork(item);\n  //         }}\n  //       />\n  //       <p>{item}</p>\n  //     </li>\n  //   ))}\n  //   {finished?.map((item) => (\n  //     <li>\n  //       <input\n  //         type=\"checkbox\"\n  //         checked={true}\n  //         className=\"list__checkbox\"\n  //         onChange={() => {\n  //           back(item);\n  //         }}\n  //       />\n  //       <p>{item}</p>\n  //     </li>\n  //   ))}\n  // </>\n  ;\n}\n\n_s(TodoItem, \"qv5AInR4nBI4gQIcI5ruGaHBxPo=\");\n\n_c = TodoItem;\nTodoItem.propTypes = {\n  todoReducer: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  todoReducer: state.todoReducer\n});\n\nexport default connect(mapStateToProps, null)(TodoItem); // export default TodoItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoItem\");","map":{"version":3,"sources":["E:/JS/hocJS/training/todo-redux/src/task/TodoItem.js"],"names":["React","useCallback","useEffect","useMemo","useState","connect","store","PropTypes","TodoItem","todoReducer","process","finished","task","checked","done","setDone","onChange","console","log","doneWork","dispatch","type","payload","mess","back","propTypes","object","isRequired","mapStateToProps","state"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,OAAxC,EAAiDC,QAAjD,QAAiE,OAAjE;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;;AAEA,SAASC,QAAT,CAAkB;AAAEC,EAAAA,WAAW,EAAE;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAAf;AAAsCC,EAAAA,IAAtC;AAA4CC,EAAAA;AAA5C,CAAlB,EAAyE;AAAA;;AACvE,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAACS,OAAD,CAAhC,CADuE,CAEvE;AACA;AACA;AACA;;AAEA,QAAMG,QAAQ,GAAGf,WAAW,CAAC,MAAM;AACjCc,IAAAA,OAAO,CAAC,CAACD,IAAF,CAAP;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ,EAFiC,CAGjC;AACA;AACA;AACA;AACA;AACA;AACD,GAT2B,CAA5B;;AAWA,QAAMK,QAAQ,GAAIP,IAAD,IAAU;AACzBN,IAAAA,KAAK,CAACc,QAAN,CAAe;AACbC,MAAAA,IAAI,EAAE,QADO;AAEbC,MAAAA,OAAO,EAAE;AAAEX,QAAAA,QAAQ,EAAEC,IAAZ;AAAkBW,QAAAA,IAAI,EAAE;AAAxB;AAFI,KAAf;AAID,GALD;;AAMA,QAAMC,IAAI,GAAIZ,IAAD,IAAU;AACrBN,IAAAA,KAAK,CAACc,QAAN,CAAe;AACbC,MAAAA,IAAI,EAAE,YADO;AAEbC,MAAAA,OAAO,EAAE;AAAEZ,QAAAA,OAAO,EAAEE,IAAX;AAAiBW,QAAAA,IAAI,EAAE;AAAvB;AAFI,KAAf;AAID,GALD;;AAOA,sBACE;AAAA,4BACE;AACE,MAAA,IAAI,EAAC,UADP;AAEE,MAAA,OAAO,EAAET,IAFX;AAGE,MAAA,SAAS,EAAC,gBAHZ;AAIE,MAAA,QAAQ,EAAE,MAAME,QAAQ;AAJ1B;AAAA;AAAA;AAAA;AAAA,YADF,eAOE;AAAA,gBAAIJ;AAAJ;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CAUE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArCF;AAuCD;;GAtEQJ,Q;;KAAAA,Q;AAuETA,QAAQ,CAACiB,SAAT,GAAqB;AACnBhB,EAAAA,WAAW,EAAEF,SAAS,CAACmB,MAAV,CAAiBC;AADX,CAArB;;AAGA,MAAMC,eAAe,GAAIC,KAAD,KAAY;AAClCpB,EAAAA,WAAW,EAAEoB,KAAK,CAACpB;AADe,CAAZ,CAAxB;;AAIA,eAAeJ,OAAO,CAACuB,eAAD,EAAkB,IAAlB,CAAP,CAA+BpB,QAA/B,CAAf,C,CACA","sourcesContent":["import React, { useCallback, useEffect, useMemo, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport store from \"../store\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction TodoItem({ todoReducer: { process, finished }, task, checked }) {\r\n  const [done, setDone] = useState(checked);\r\n  // useEffect(() => {\r\n  //   console.log(done);\r\n  // }, []);\r\n  // const memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);\r\n\r\n  const onChange = useCallback(() => {\r\n    setDone(!done);\r\n    console.log(done);\r\n    // if(done){\r\n    //   store.dispatch({\r\n    //     type: \"remove\",\r\n    //     payload: { finished: task, mess: \"finished working\" },\r\n    //   });\r\n    // }\r\n  });\r\n\r\n  const doneWork = (task) => {\r\n    store.dispatch({\r\n      type: \"remove\",\r\n      payload: { finished: task, mess: \"finished working\" },\r\n    });\r\n  };\r\n  const back = (task) => {\r\n    store.dispatch({\r\n      type: \"add__again\",\r\n      payload: { process: task, mess: \"update success\" },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <li>\r\n      <input\r\n        type=\"checkbox\"\r\n        checked={done}\r\n        className=\"list__checkbox\"\r\n        onChange={() => onChange()}\r\n      />\r\n      <p>{task}</p>\r\n    </li>\r\n    // <>\r\n    //   {process?.map((item) => (\r\n    //     <li>\r\n    //       <input\r\n    //         type=\"checkbox\"\r\n    //         checked={false}\r\n    //         className=\"list__checkbox\"\r\n    //         onChange={() => {\r\n    //           doneWork(item);\r\n    //         }}\r\n    //       />\r\n    //       <p>{item}</p>\r\n    //     </li>\r\n    //   ))}\r\n    //   {finished?.map((item) => (\r\n    //     <li>\r\n    //       <input\r\n    //         type=\"checkbox\"\r\n    //         checked={true}\r\n    //         className=\"list__checkbox\"\r\n    //         onChange={() => {\r\n    //           back(item);\r\n    //         }}\r\n    //       />\r\n    //       <p>{item}</p>\r\n    //     </li>\r\n    //   ))}\r\n    // </>\r\n  );\r\n}\r\nTodoItem.propTypes = {\r\n  todoReducer: PropTypes.object.isRequired,\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  todoReducer: state.todoReducer,\r\n});\r\n\r\nexport default connect(mapStateToProps, null)(TodoItem);\r\n// export default TodoItem;\r\n"]},"metadata":{},"sourceType":"module"}