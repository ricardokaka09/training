{"ast":null,"code":"var _jsxFileName = \"E:\\\\JS\\\\hocJS\\\\training\\\\todo-redux\\\\src\\\\task\\\\TodoItem.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport store from \"../store\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TodoItem({\n  task,\n  ...chil\n}) {\n  _s();\n\n  const [done, setDone] = useState(false);\n  useEffect(() => {\n    {\n      function update() {\n        console.log(done);\n\n        if (done) {\n          store.dispatch({\n            type: \"remove\",\n            payload: {\n              finished: task,\n              mess: \"update success\"\n            }\n          });\n        } else {\n          store.dispatch({\n            type: \"add__again\",\n            payload: {\n              process: task,\n              mess: \"update success\"\n            }\n          });\n        }\n      }\n\n      update();\n    }\n  }, [done]);\n\n  const onChange = () => {\n    setDone(!done); // setDone(!done)\n\n    console.log(done); // if (done) {\n    //   store.dispatch({\n    //     type: \"remove\",\n    //     payload: { finished: task, mess: \"update success\" },\n    //   });\n    // } else {\n    //   store.dispatch({\n    //     type: \"add__again\",\n    //     payload: { process: task, mess: \"update success\" },\n    //   });\n    // }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      name: \"\",\n      id: \"\",\n      checked: chil.checked,\n      className: \"list__checkbox\",\n      onChange: () => setDone(!done)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: task\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TodoItem, \"dG0Xu/UHLyKNC3cIz8t84yBdglk=\");\n\n_c = TodoItem;\nexport default TodoItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoItem\");","map":{"version":3,"sources":["E:/JS/hocJS/training/todo-redux/src/task/TodoItem.js"],"names":["React","useEffect","useState","store","TodoItem","task","chil","done","setDone","update","console","log","dispatch","type","payload","finished","mess","process","onChange","checked"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,UAAlB;;;AAEA,SAASC,QAAT,CAAkB;AAAEC,EAAAA,IAAF;AAAQ,KAAGC;AAAX,CAAlB,EAAqC;AAAA;;AACnC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,KAAD,CAAhC;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd;AACE,eAASQ,MAAT,GAAkB;AAChBC,QAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;;AACA,YAAIA,IAAJ,EAAU;AACRJ,UAAAA,KAAK,CAACS,QAAN,CAAe;AACbC,YAAAA,IAAI,EAAE,QADO;AAEbC,YAAAA,OAAO,EAAE;AAAEC,cAAAA,QAAQ,EAAEV,IAAZ;AAAkBW,cAAAA,IAAI,EAAE;AAAxB;AAFI,WAAf;AAID,SALD,MAKO;AACLb,UAAAA,KAAK,CAACS,QAAN,CAAe;AACbC,YAAAA,IAAI,EAAE,YADO;AAEbC,YAAAA,OAAO,EAAE;AAAEG,cAAAA,OAAO,EAAEZ,IAAX;AAAiBW,cAAAA,IAAI,EAAE;AAAvB;AAFI,WAAf;AAID;AACF;;AACDP,MAAAA,MAAM;AACP;AACF,GAlBQ,EAkBN,CAACF,IAAD,CAlBM,CAAT;;AAmBA,QAAMW,QAAQ,GAAG,MAAM;AACrBV,IAAAA,OAAO,CAAC,CAACD,IAAF,CAAP,CADqB,CAErB;;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ,EAHqB,CAIrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GAfD;;AAgBA,sBACE;AAAA,4BACE;AACE,MAAA,IAAI,EAAC,UADP;AAEE,MAAA,IAAI,EAAC,EAFP;AAGE,MAAA,EAAE,EAAC,EAHL;AAIE,MAAA,OAAO,EAAED,IAAI,CAACa,OAJhB;AAKE,MAAA,SAAS,EAAC,gBALZ;AAME,MAAA,QAAQ,EAAE,MAAMX,OAAO,CAAC,CAACD,IAAF;AANzB;AAAA;AAAA;AAAA;AAAA,YADF,eASE;AAAA,gBAAIF;AAAJ;AAAA;AAAA;AAAA;AAAA,YATF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAaD;;GAlDQD,Q;;KAAAA,Q;AAoDT,eAAeA,QAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport store from \"../store\";\r\n\r\nfunction TodoItem({ task, ...chil }) {\r\n  const [done, setDone] = useState(false);\r\n  useEffect(() => {\r\n    {\r\n      function update() {\r\n        console.log(done);\r\n        if (done) {\r\n          store.dispatch({\r\n            type: \"remove\",\r\n            payload: { finished: task, mess: \"update success\" },\r\n          });\r\n        } else {\r\n          store.dispatch({\r\n            type: \"add__again\",\r\n            payload: { process: task, mess: \"update success\" },\r\n          });\r\n        }\r\n      }\r\n      update();\r\n    }\r\n  }, [done]);\r\n  const onChange = () => {\r\n    setDone(!done);\r\n    // setDone(!done)\r\n    console.log(done);\r\n    // if (done) {\r\n    //   store.dispatch({\r\n    //     type: \"remove\",\r\n    //     payload: { finished: task, mess: \"update success\" },\r\n    //   });\r\n    // } else {\r\n    //   store.dispatch({\r\n    //     type: \"add__again\",\r\n    //     payload: { process: task, mess: \"update success\" },\r\n    //   });\r\n    // }\r\n  };\r\n  return (\r\n    <li>\r\n      <input\r\n        type=\"checkbox\"\r\n        name=\"\"\r\n        id=\"\"\r\n        checked={chil.checked}\r\n        className=\"list__checkbox\"\r\n        onChange={() => setDone(!done)}\r\n      />\r\n      <p>{task}</p>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default TodoItem;\r\n"]},"metadata":{},"sourceType":"module"}