{"ast":null,"code":"const initialState = {\n  process: [],\n  finished: [],\n  notice: null\n};\nexport default function (state = initialState, action) {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case \"add\":\n      return { ...state,\n        process: [payload.process, ...state.process],\n        notice: payload.mess\n      };\n\n    case \"remove\":\n      return { ...state,\n        process: [state.process.filter(item => item !== payload.finished)],\n        finished: [payload.finished, ...state.finished]\n      };\n\n    case \"error\":\n      return { ...state,\n        notice: payload.mess\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["E:/JS/hocJS/training/todo-redux/src/constants/reducer/todo.reducer.js"],"names":["initialState","process","finished","notice","state","action","type","payload","mess","filter","item"],"mappings":"AAAA,MAAMA,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,EADU;AAEnBC,EAAAA,QAAQ,EAAE,EAFS;AAGnBC,EAAAA,MAAM,EAAE;AAHW,CAArB;AAMA,eAAe,UAAUC,KAAK,GAAGJ,YAAlB,EAAgCK,MAAhC,EAAwC;AACrD,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBF,MAA1B;;AACA,UAAQC,IAAR;AACE,SAAK,KAAL;AACE,aAAO,EACL,GAAGF,KADE;AAELH,QAAAA,OAAO,EAAE,CAACM,OAAO,CAACN,OAAT,EAAkB,GAAGG,KAAK,CAACH,OAA3B,CAFJ;AAGLE,QAAAA,MAAM,EAAEI,OAAO,CAACC;AAHX,OAAP;;AAKF,SAAK,QAAL;AACE,aAAO,EACL,GAAGJ,KADE;AAELH,QAAAA,OAAO,EAAE,CAACG,KAAK,CAACH,OAAN,CAAcQ,MAAd,CAAsBC,IAAD,IAAUA,IAAI,KAAKH,OAAO,CAACL,QAAhD,CAAD,CAFJ;AAGLA,QAAAA,QAAQ,EAAE,CAACK,OAAO,CAACL,QAAT,EAAmB,GAAGE,KAAK,CAACF,QAA5B;AAHL,OAAP;;AAKF,SAAK,OAAL;AACE,aAAO,EACL,GAAGE,KADE;AAELD,QAAAA,MAAM,EAAEI,OAAO,CAACC;AAFX,OAAP;;AAIF;AACE,aAAOJ,KAAP;AAnBJ;AAqBD","sourcesContent":["const initialState = {\r\n  process: [],\r\n  finished: [],\r\n  notice: null,\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case \"add\":\r\n      return {\r\n        ...state,\r\n        process: [payload.process, ...state.process],\r\n        notice: payload.mess,\r\n      };\r\n    case \"remove\":\r\n      return {\r\n        ...state,\r\n        process: [state.process.filter((item) => item !== payload.finished)],\r\n        finished: [payload.finished, ...state.finished],\r\n      };\r\n    case \"error\":\r\n      return {\r\n        ...state,\r\n        notice: payload.mess,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}