{"ast":null,"code":"var _jsxFileName = \"E:\\\\JS\\\\hocJS\\\\training\\\\todo-redux\\\\src\\\\task\\\\TodoItem.js\";\nimport React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport store from \"../store\";\nimport PropTypes from \"prop-types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TodoItem({\n  todoReducer: {\n    process,\n    finished\n  },\n  task,\n  checked\n}) {\n  const onChange = ({\n    status\n  }) => {\n    if (status) {\n      store.dispatch({\n        type: \"add__again\",\n        payload: {\n          process: task,\n          mess: \"update success\"\n        }\n      });\n    } else {\n      store.dispatch({\n        type: \"remove\",\n        payload: {\n          finished: task,\n          mess: \"finished working\"\n        }\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      checked: checked,\n      className: \"list__checkbox\",\n      onChange: () => onChange({\n        status: checked\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: task\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n\n_c = TodoItem;\nTodoItem.propTypes = {\n  todoReducer: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  todoReducer: state.todoReducer\n});\n\nexport default connect(mapStateToProps, null)(TodoItem);\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoItem\");","map":{"version":3,"sources":["E:/JS/hocJS/training/todo-redux/src/task/TodoItem.js"],"names":["React","useCallback","useEffect","useMemo","useState","connect","store","PropTypes","TodoItem","todoReducer","process","finished","task","checked","onChange","status","dispatch","type","payload","mess","propTypes","object","isRequired","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,OAAxC,EAAiDC,QAAjD,QAAiE,OAAjE;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;;AAEA,SAASC,QAAT,CAAkB;AAAEC,EAAAA,WAAW,EAAE;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAAf;AAAsCC,EAAAA,IAAtC;AAA4CC,EAAAA;AAA5C,CAAlB,EAAyE;AACvE,QAAMC,QAAQ,GAAG,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAgB;AAC/B,QAAIA,MAAJ,EAAY;AACVT,MAAAA,KAAK,CAACU,QAAN,CAAe;AACbC,QAAAA,IAAI,EAAE,YADO;AAEbC,QAAAA,OAAO,EAAE;AAAER,UAAAA,OAAO,EAAEE,IAAX;AAAiBO,UAAAA,IAAI,EAAE;AAAvB;AAFI,OAAf;AAID,KALD,MAKO;AACLb,MAAAA,KAAK,CAACU,QAAN,CAAe;AACbC,QAAAA,IAAI,EAAE,QADO;AAEbC,QAAAA,OAAO,EAAE;AAAEP,UAAAA,QAAQ,EAAEC,IAAZ;AAAkBO,UAAAA,IAAI,EAAE;AAAxB;AAFI,OAAf;AAID;AACF,GAZD;;AAcA,sBACE;AAAA,4BACE;AACE,MAAA,IAAI,EAAC,UADP;AAEE,MAAA,OAAO,EAAEN,OAFX;AAGE,MAAA,SAAS,EAAC,gBAHZ;AAIE,MAAA,QAAQ,EAAE,MAAMC,QAAQ,CAAC;AAAEC,QAAAA,MAAM,EAAEF;AAAV,OAAD;AAJ1B;AAAA;AAAA;AAAA;AAAA,YADF,eAOE;AAAA,gBAAID;AAAJ;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD;;KA1BQJ,Q;AA2BTA,QAAQ,CAACY,SAAT,GAAqB;AACnBX,EAAAA,WAAW,EAAEF,SAAS,CAACc,MAAV,CAAiBC;AADX,CAArB;;AAGA,MAAMC,eAAe,GAAIC,KAAD,KAAY;AAClCf,EAAAA,WAAW,EAAEe,KAAK,CAACf;AADe,CAAZ,CAAxB;;AAIA,eAAeJ,OAAO,CAACkB,eAAD,EAAkB,IAAlB,CAAP,CAA+Bf,QAA/B,CAAf","sourcesContent":["import React, { useCallback, useEffect, useMemo, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport store from \"../store\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction TodoItem({ todoReducer: { process, finished }, task, checked }) {\r\n  const onChange = ({ status }) => {\r\n    if (status) {\r\n      store.dispatch({\r\n        type: \"add__again\",\r\n        payload: { process: task, mess: \"update success\" },\r\n      });\r\n    } else {\r\n      store.dispatch({\r\n        type: \"remove\",\r\n        payload: { finished: task, mess: \"finished working\" },\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <li>\r\n      <input\r\n        type=\"checkbox\"\r\n        checked={checked}\r\n        className=\"list__checkbox\"\r\n        onChange={() => onChange({ status: checked })}\r\n      />\r\n      <p>{task}</p>\r\n    </li>\r\n  );\r\n}\r\nTodoItem.propTypes = {\r\n  todoReducer: PropTypes.object.isRequired,\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  todoReducer: state.todoReducer,\r\n});\r\n\r\nexport default connect(mapStateToProps, null)(TodoItem);\r\n"]},"metadata":{},"sourceType":"module"}